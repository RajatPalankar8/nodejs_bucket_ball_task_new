<!DOCTYPE html>
<html>

<head>
  <style>
    table {
      border-collapse: collapse;
      width: 100%;
    }

    th,
    td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }

    th {
      background-color: #f2f2f2;
    }
  </style>
  <title>Bucket Ball App</title>
</head>

<body>
  <div style="display: flex;">


    <form id="form1">
      <h2>Create Bucket</h2>
      <label for="name1">Name:</label>
      <input type="text" id="name" name="name" required><br><br>
      <label for="email1">Volume(Size):</label>
      <input type="text" id="vol" name="vol" required><br><br>
      <input type="submit" value="Submit">
      <p id="form1-response"></p>
    </form>
    <hr>
    <form id="form2">
      <h2>Create Ball</h2>
      <label for="name1">Name:</label>
      <input type="text" id="name" name="name" required><br><br>
      <label for="vol">Volume(Size):</label>
      <input type="text" id="vol" name="vol" required><br><br>
      <input type="submit" value="Submit">
      <p id="form2-response"></p>
    </form>
    <hr>
    <form id="form3">
      <h2>Full Bucket</h2>
      <label for="name3">Bucket Name:</label>
      <input type="text" id="bucketName" name="bucketName" required><br><br>
      <label for="vol">Ball Name:</label>
      <input type="text" id="ballName" name="ballName" required><br><br>
      <input type="submit" value="Submit">
      <p id="form3-response"></p>
    </form>
  </div>

  <h2>Select Balls and Enter Bucket Name</h2>
  <form id="ballForm">
    <label for="bucketName">Bucket Name:</label>
    <input type="text" id="bucketName" name="bucketName"><br><br>

    <h3>Balls:</h3>
    <div id="ballList">
      <!-- Ball data from MongoDB will be dynamically added here -->
    </div>
    <input type="submit" value="Submit">
  </form>
  <h1>Bucket Data</h1>
  <table>
    <thead>
      <tr>
        <th>Name</th>
        <th>Volume</th>
        <th>Filled</th>
        <th>Created At</th>
        <th>Updated At</th>
      </tr>
    </thead>
    <tbody>
      <% buckets.forEach(bucket=> { %>
        <tr>
          <td>
            <%= bucket.name %>
          </td>
          <td>
            <%= bucket.vol %>
          </td>
          <td>
            <%= bucket.filled.join(', ') %></td>
          <td><%= bucket.createdAt.toLocaleString() %></td>
          <td><%= bucket.updatedAt.toLocaleString() %></td>
        </tr>
      <% }); %>
    </tbody>
  </table>

  <h1>Ball Data</h1>
  <table>
    <thead>
      <tr>
        <th>Name</th>
        <th>Volume</th>
        <th>Created At</th>
        <th>Updated At</th>
      </tr>
    </thead>
    <tbody>
      <% balls.forEach(ball => { %>
        <tr>
          <td><%= ball.name %></td>
          <td><%= ball.vol %></td>
          <td><%= ball.createdAt.toLocaleString() %></td>
          <td><%= ball.updatedAt.toLocaleString() %></td>
        </tr>
      <% }); %>
    </tbody>
  </table>

  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script>
    // Function to handle form submission
    function createBucketEvent(event) {
      event.preventDefault(); // Prevent the default form submission

      // Get the form data
      const form = event.target;
      const formData = new FormData(form);

      // Convert form data to JSON object
      const jsonData = {};
      formData.forEach((value, key) => {
        jsonData[key] = value;
      });

      // Make a POST request to the backend API
      axios.post(' http://localhost:3000/createBucket', jsonData).then(response => {
        // Handle the API response
        const formId = form.id;
        const responseElement = document.getElementById(`${formId}-response`);
        responseElement.textContent = response.data.message;

        setTimeout(() => {
          location.reload();
        }, 1000);
      })
        .catch(error => {
          console.error(error); // Handle any errors
        });
    }

    function createBallEvent(event) {
      event.preventDefault(); // Prevent the default form submission

      // Get the form data
      const form = event.target;
      const formData = new FormData(form);

      // Convert form data to JSON object
      const jsonData = {};
      formData.forEach((value, key) => {
        jsonData[key] = value;
      });

      // Make a POST request to the backend API
      axios.post('http://localhost:3000/createBall', jsonData)
        .then(response => {
          // Handle the API response
          const formId = form.id;
          const responseElement = document.getElementById(`${formId}-response`);
          responseElement.textContent = response.data.message;
          setTimeout(() => {
            location.reload();
          }, 1000);
        })
        .catch(error => {
          console.error(error); // Handle any errors
        });
    }

    function fillBucketEvent(event) {
      event.preventDefault(); // Prevent the default form submission

      // Get the form data
      const form = event.target;
      const formData = new FormData(form);

      // Convert form data to JSON object
      const jsonData = {};
      formData.forEach((value, key) => {
        jsonData[key] = value;
      });

      // Make a POST request to the backend API
      axios.post('http://localhost:3000/fillBucket', jsonData)
        .then(response => {
          // Handle the API response
          const formId = form.id;
          const responseElement = document.getElementById(`${formId}-response`);
          responseElement.textContent = response.data.message;
          setTimeout(() => {
            location.reload();
          }, 1000);
        })
        .catch(error => {
          console.error(error); // Handle any errors
        });
    }

    // Attach event listeners to the forms
    const form1 = document.getElementById('form1');
    form1.addEventListener('submit', createBucketEvent);

    const form2 = document.getElementById('form2');
    form2.addEventListener('submit', createBallEvent);

    const form3 = document.getElementById('form3');
    form3.addEventListener('submit', fillBucketEvent);
  </script>


              <script>

                axios.post('http://localhost:3000/getBallList')
                  .then(response => {
                    console.log("----------->>>>>>>", response.data.success);
                    createBallCheckboxes(response.data.success);
                  }
                  )
                  .catch(error => console.error('Error fetching balls:', error));

            
                // to show a list of box
                function createBallCheckboxes(balls) {
                  const ballListDiv = document.getElementById('ballList');
                  balls.forEach(ball => {
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.name = 'balls';
                    checkbox.value = ball._id.$oid;

                    const label = document.createElement('label');
                    label.innerHTML = `${ball.name} (Vol: ${ball.vol}) :- &nbsp;`;
                    const inputField = document.createElement('input');
                    inputField.type = 'number';
                    inputField.name = `ball_${ball._id.$oid}`; // Each input field will have a unique name
                    inputField.placeholder = 'Number of balls';
                    label.appendChild(checkbox);
                    ballListDiv.appendChild(label);
                    ballListDiv.appendChild(inputField);
                    ballListDiv.appendChild(document.createElement('br'));
                    ballListDiv.appendChild(document.createElement('br'));
                  });
                }
              </script>


<script>
  // Fetch balls data from the server using Axios - Same as before

  // Handle form submission

  
  const form = document.getElementById('ballForm');
  form.addEventListener('submit', (event) => {
    event.preventDefault(); // Prevent default form submission behavior
    console.log("submit clicked -----??????");
    // Collect form data and arrange it in JSON format
    const formData = new FormData(form);
    const data = {
      bucketName: formData.get('bucketName'),
      balls: [],
    };

    formData.getAll('balls').forEach(ballId => {
      const ballCount = formData.get(`ball.name`);
      data.balls.push({ _id: ballId, count: ballCount });
    });

    console.log("submit clicked -----Balls ",data);

    // // Make POST request to the server with the JSON data for form submission
    // axios.post('/api/submitForm', data) // Replace "/api/submitForm" with your server's endpoint for form submission
    //   .then(response => {
    //     // Handle successful form submission response if needed
    //     console.log(response.data);
    //   })
    //   .catch(error => console.error('Error submitting form:', error));
  });
</script>
</body>

</html>